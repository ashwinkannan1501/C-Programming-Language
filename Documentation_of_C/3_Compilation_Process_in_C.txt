
Compilation Process in C :- 
-----------------------------

What is Compilation ? :-
-------------------------
	The Compilation is the process of converting the source code into the object code. 
	It gets done with the help of the compiler.
	First, The compiler checks the source code for the syntactical or structural error, and if the source code is error-free, then it generates the object code.

	The C Compilation process converts the source code taken as input into the object code (or) machine code

	The Pre-processor takes the source code as input, and it removes all the comments from the soure code.
	The Pre-processor takes the pre-processor directives and interprets it.
	For Example, if <stdio.h> directive is available in the program means, then the pre-processor interprets the directive and replace this directive with the content of 'stdio.h' file


        The Compilation process can be divided into 4 steps.
        (i) Pre-Processing
        (ii) Compiling
        (iii) Assembling and
        (iv) Linking
      
(i) Pre-Processor :- 
----------------------
	The Source code is the code which is written in a text editor and the source code file is given in an extension '.c'.
	The source code is first passed to the pre-processor and then pre-processor expands this code.
	After expanding the code, the expanded code is passed to the compiler.

(ii) Compiler :- 
------------------
	The code which is expanded by the pre-processor is passed to the compiler.
	The Compiler converts this code to the "assembly code" (or) else , we can also say that the C Compiler converts the pre-processed code into assembly code.
	
(iii) Assembler :- 
--------------------
	The Assembly code is converted into object code by using an assembler.
	The name of the object file generated by the assembler is the same as the source file.
	The extension of the object file in DOS is '.obj' and in UNIX/LINUX/WSL, the extension is '.o'
	For Example, if the name of the source file is 'hello.c', then the name of the object file would be 'hello.obj'/'hello.o'.	

(iv) Linker :-
-----------------
	Mainly all the programs written in C use library functions.
	These library functions are pre-compiled, and the object code of these library files is stored with ('.lib') or (.a) extension 
	The main working of the linker is to combine the object code of library files with the object code of our program.
	Sometimes the situation arises when our program refers to the functions defined in other files, then linker plays a very important role in this
	It links the object code of these files in our programs. Therefore, we conclude that the job of the linker is to link the object code of our programwith the object code of thhe library files and other files.
	The output of the linker is the executable files
	The name of the executable file is the same as the source file but differs only in their extension
	In DOS, the extension of the executable file is '.exe' and in UNIX, the executable file can be named as '.out'.
	For Example, if we are using printf() function in a program, then the linker adds it's associated code in an output file.

For Example,
-------------
File Name : hello.c
#include<stdio.h>
int main() 
{
printf("Hello C!");
return 0;
}

Explanation :-
---------------
	Firstly , the input file i.e hello.c is passed to the pre-processor and the pre-processor converts the source code into the expanded source code. The extension of the expanded source code would be 'hello.i'
	The expanded source code is passed to the compiler, and the compiler converts this expanded source code into assembly code. The extension of the assembly code would be 'hello.s'
	The assembly code is then sent to the assembler, which converts the assembly code into the object code
	After the creation of the object code, the linker creates the executable file. The loader will then load the executable file for the execution.
	
